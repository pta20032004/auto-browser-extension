class AIHelper {
    constructor() {
        this.apiKey = '';
        this.initializeEventListeners();
        this.loadApiKey();
        this.lastRawResponse = '';
        this.lastDOMContent = '';
        this.originalDOMLength = 0;
        this.truncatedDOMLength = 0;
        // üî• NEW: Allow disabling truncation
        this.enableTruncation = false; // ‚úÖ Set to false to disable truncation
        this.maxDomSize = 100000; // ‚úÖ Increased from 12k to 100k
    }

    initializeEventListeners() {
        // API Key input
        document.getElementById('aiApiKey')?.addEventListener('change', (e) => {
            this.saveApiKey(e.target.value);
        });

        // Generate script button
        document.getElementById('generateAIScriptBtn')?.addEventListener('click', () => {
            this.generateScriptFromDescription();
        });

        // Clear AI script button
        document.getElementById('clearAIScriptBtn')?.addEventListener('click', () => {
            this.clearAIScript();
        });

        // Use AI script button
        document.getElementById('useAIScriptBtn')?.addEventListener('click', () => {
            this.useGeneratedScript();
        });

        // Save AI script button
        document.getElementById('saveAIScriptBtn')?.addEventListener('click', () => {
            this.saveAIScript();
        });

        // DOM Debug Controls
        document.getElementById('toggleDOMResponse')?.addEventListener('click', () => {
            this.toggleDOMResponseDisplay();
        });

        document.getElementById('copyDOMResponse')?.addEventListener('click', () => {
            this.copyDOMResponseToClipboard();
        });

        document.getElementById('clearDOMResponse')?.addEventListener('click', () => {
            this.clearDOMResponseDisplay();
        });

        // AI Response Debug Controls
        document.getElementById('toggleAIResponse')?.addEventListener('click', () => {
            this.toggleAIResponseDisplay();
        });

        document.getElementById('copyAIResponse')?.addEventListener('click', () => {
            this.copyAIResponseToClipboard();
        });

        document.getElementById('clearAIResponse')?.addEventListener('click', () => {
            this.clearAIResponseDisplay();
        });

        // üî• NEW: Truncation controls
        document.getElementById('enableTruncation')?.addEventListener('change', (e) => {
            this.enableDOMTruncation(e.target.checked);
        });

        document.getElementById('maxDomSize')?.addEventListener('change', (e) => {
            this.setMaxDOMSize(parseInt(e.target.value) || 100000);
        });
    }

    async loadApiKey() {
        try {
            const result = await chrome.storage.local.get(['aiApiKey']);
            if (result.aiApiKey) {
                this.apiKey = result.aiApiKey;
                const input = document.getElementById('aiApiKey');
                if (input) input.value = this.apiKey;
            }
        } catch (error) {
            console.error('Failed to load API key:', error);
        }
    }

    async saveApiKey(apiKey) {
        this.apiKey = apiKey;
        try {
            await chrome.storage.local.set({ aiApiKey: apiKey });
            this.showAlert('API Key ƒë√£ ƒë∆∞·ª£c l∆∞u!', 'success');
        } catch (error) {
            console.error('Failed to save API key:', error);
            this.showAlert('Kh√¥ng th·ªÉ l∆∞u API Key', 'error');
        }
    }

    // Save AI generated script to IndexedDB
    async saveAIScript() {
        if (!this.generatedSteps || this.generatedSteps.length === 0) {
            this.showAlert('Kh√¥ng c√≥ script n√†o ƒë·ªÉ l∆∞u.', 'warning');
            return;
        }

        const scriptName = prompt('Nh·∫≠p t√™n script AI:', `AI_Script_${Date.now()}`);
        if (!scriptName) return;

        try {
            const fullName = `[AI] ${scriptName}`;
            await window.dbHelper.saveScript(fullName, this.generatedSteps);
            this.showAlert(`ƒê√£ l∆∞u script "${fullName}" th√†nh c√¥ng!`, 'success');
        } catch (error) {
            console.error('Failed to save AI script:', error);
            this.showAlert('Kh√¥ng th·ªÉ l∆∞u script AI: ' + error.message, 'error');
        }
    }

    // üî• ENHANCED: Much better truncation with social media support
    smartTruncateHTML(html, maxLength = 100000) {
        if (html.length <= maxLength) return html;
        
        console.warn(`üîß DOM truncation: ${html.length} ‚Üí ${maxLength} chars`);
        
        // üî• ENHANCED: Much better protection patterns for Facebook/social media
        const importantPatterns = [
            // Form inputs
            /<input[^>]*(?:search|t√¨m|ki·∫øm|query|q|email|password|username)[^>]*>/gi,
            /<button[^>]*(?:search|t√¨m|submit|g·ª≠i|login|ƒëƒÉng|register)[^>]*>.*?<\/button>/gi,
            /<form[^>]*>.*?<\/form>/gi,
            
            // Navigation and structure
            /<nav[^>]*>.*?<\/nav>/gi,
            /<header[^>]*>.*?<\/header>/gi,
            /<a[^>]*href[^>]*>.*?<\/a>/gi,
            
            // üî• NEW: Social media interaction buttons - COMPREHENSIVE
            /<[^>]*aria-label[^>]*(?:comment|like|share|react|follow|message)[^>]*>.*?<\/[^>]*>/gi,
            /<[^>]*aria-label[^>]*(?:b√¨nh lu·∫≠n|th√≠ch|chia s·∫ª|ph·∫£n ·ª©ng|theo d√µi|nh·∫Øn tin)[^>]*>.*?<\/[^>]*>/gi,
            /<[^>]*role="button"[^>]*>.*?(?:comment|like|share|react|post|send|follow)[^>]*<\/[^>]*>/gi,
            /<[^>]*role="button"[^>]*>.*?(?:b√¨nh lu·∫≠n|th√≠ch|chia s·∫ª|ph·∫£n ·ª©ng|ƒëƒÉng|g·ª≠i|theo d√µi)[^>]*<\/[^>]*>/gi,
            /<div[^>]*role="button"[^>]*>.*?<\/div>/gi,
            /<button[^>]*>.*?(?:comment|like|share|post|send|follow|message)[^>]*<\/button>/gi,
            /<button[^>]*>.*?(?:b√¨nh lu·∫≠n|th√≠ch|chia s·∫ª|ƒëƒÉng|g·ª≠i|theo d√µi|nh·∫Øn tin)[^>]*<\/button>/gi,
            
            // Data attributes and test elements
            /<\w+[^>]*(?:data-testid|data-cy|data-test|aria-label|role)[^>]*>.*?<\/\w+>/gi,
            /<select[^>]*>.*?<\/select>/gi,
            /<textarea[^>]*>.*?<\/textarea>/gi,
            
            // üî• NEW: Interactive elements by text content - BROADER
            /<[^>]*>.*?(?:comment|b√¨nh lu·∫≠n|like|th√≠ch|share|chia s·∫ª|post|ƒëƒÉng|send|g·ª≠i|follow|theo d√µi|message|nh·∫Øn tin|react|ph·∫£n ·ª©ng).*?<\/[^>]*>/gi,
            
            // üî• NEW: Facebook-specific patterns
            /<div[^>]*data-[^>]*>.*?(?:comment|like|share).*?<\/div>/gi,
            /<span[^>]*>.*?(?:Comment|Like|Share|B√¨nh lu·∫≠n|Th√≠ch|Chia s·∫ª).*?<\/span>/gi
        ];
        
        let protectedElements = [];
        let protectedHtml = html;
        
        // Extract and protect important elements
        importantPatterns.forEach((pattern, index) => {
            const matches = html.match(pattern);
            if (matches) {
                matches.forEach((match, matchIndex) => {
                    const placeholder = `__PROTECTED_${index}_${matchIndex}__`;
                    protectedElements.push({ placeholder, content: match });
                    protectedHtml = protectedHtml.replace(match, placeholder);
                });
            }
        });
        
        console.log(`üõ°Ô∏è Protected ${protectedElements.length} important elements`);
        
        // üî• IMPROVED: Better cutting strategy
        let cutPos = maxLength;
        
        // Try to cut at tag boundaries
        while (cutPos > maxLength * 0.7 && protectedHtml[cutPos] !== '>') {
            cutPos--;
        }
        
        // If still not found, cut at word boundaries
        if (cutPos <= maxLength * 0.7) {
            cutPos = protectedHtml.lastIndexOf(' ', maxLength);
            if (cutPos < maxLength * 0.5) {
                cutPos = maxLength; // Force cut if necessary
            }
        }
        
        let truncatedHtml = protectedHtml.substring(0, cutPos + 1);
        
        // Restore protected elements
        protectedElements.forEach(({ placeholder, content }) => {
            truncatedHtml = truncatedHtml.replace(placeholder, content);
        });
        
        console.log(`‚úÇÔ∏è Truncation complete: ${html.length} ‚Üí ${truncatedHtml.length} chars`);
        return truncatedHtml + '\n<!-- [Truncated for AI context] -->';
    }

    async generateScriptFromDescription() {
        const description = document.getElementById('aiDescription')?.value?.trim();
        if (!description) {
            this.showAlert('Vui l√≤ng nh·∫≠p m√¥ t·∫£ h√†nh ƒë·ªông', 'warning');
            return;
        }

        if (!this.apiKey) {
            this.showAlert('Vui l√≤ng nh·∫≠p Google AI Studio API Key', 'warning');
            return;
        }

        const generateBtn = document.getElementById('generateAIScriptBtn');
        if (generateBtn) {
            generateBtn.textContent = 'ƒêang ph√¢n t√≠ch DOM...';
            generateBtn.disabled = true;
        }

        try {
            // Get current page DOM
            const dom = await this.getCurrentPageDOM();
            const currentUrl = await this.getCurrentPageUrl();
            
            // Store original DOM and display it
            this.originalDOMLength = dom.length;
            this.lastDOMContent = dom;
            this.displayDOMContent(dom);
            
            if (generateBtn) {
                generateBtn.textContent = 'ƒêang t·∫°o script...';
            }
            
            // üî• FIXED: No more aggressive truncation!
            let processedDOM = dom;
            
            if (this.enableTruncation && dom.length > this.maxDomSize) {
                console.warn(`‚ö†Ô∏è DOM size ${dom.length} exceeds limit ${this.maxDomSize}, truncating...`);
                processedDOM = this.smartTruncateHTML(dom, this.maxDomSize);
                this.truncatedDOMLength = processedDOM.length;
            } else {
                console.log(`‚úÖ Sending full DOM (${dom.length} chars) to AI - No truncation!`);
                this.truncatedDOMLength = dom.length; // Same as original
            }
            
            this.updateDOMTruncationInfo();
            
            // Generate script using AI with FULL DOM or controlled truncation
            const aiResponse = await this.callGoogleAI(description, processedDOM, currentUrl);
            
            // Display raw AI response immediately
            this.displayRawAIResponse(aiResponse);
            
            const steps = this.parseAIResponse(aiResponse);
            
            // Display generated script
            this.displayGeneratedScript(steps);
            this.showAlert('ƒê√£ t·∫°o script th√†nh c√¥ng!', 'success');

        } catch (error) {
            console.error('AI script generation failed:', error);
            this.showAlert('L·ªói t·∫°o script: ' + error.message, 'error');
            
            // Display error in raw response
            this.displayRawAIResponse(`ERROR: ${error.message}\n\nStack: ${error.stack}`);
        } finally {
            if (generateBtn) {
                generateBtn.textContent = 'ü§ñ T·∫°o Script';
                generateBtn.disabled = false;
            }
        }
    }

    async getCurrentPageDOM() {
        return new Promise((resolve, reject) => {
            chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
                if (tabs[0]) {
                    chrome.tabs.sendMessage(tabs[0].id, {
                        action: 'getSerializedDOM'
                    }, (response) => {
                        if (chrome.runtime.lastError) {
                            reject(new Error(chrome.runtime.lastError.message));
                        } else if (response?.success) {
                            resolve(response.dom);
                        } else {
                            reject(new Error(response?.error || 'Failed to get DOM'));
                        }
                    });
                } else {
                    reject(new Error('No active tab found'));
                }
            });
        });
    }

    async getCurrentPageUrl() {
        return new Promise((resolve, reject) => {
            chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
                if (tabs[0]) {
                    resolve(tabs[0].url);
                } else {
                    reject(new Error('No active tab found'));
                }
            });
        });
    }

    async callGoogleAI(description, dom, currentUrl) {
        const availableActions = this.getAvailableActions();
        
        // üî• ENHANCED: Much better prompt for social media
        const prompt = `B·∫°n l√† chuy√™n gia t·ª± ƒë·ªông h√≥a web. D·ª±a tr√™n m√¥ t·∫£ c·ªßa ng∆∞·ªùi d√πng v√† DOM HTML th·ª±c t·∫ø, h√£y t·∫°o m·ªôt m·∫£ng JSON c√°c b∆∞·ªõc t·ª± ƒë·ªông h√≥a v·ªõi CSS selectors TH·∫¨T.

M√î T·∫¢ NG∆Ø·ªúI D√ôNG: "${description}"
URL TRANG HI·ªÜN T·∫†I: ${currentUrl}

C√ÅC H√ÄNH ƒê·ªòNG C√ì S·∫¥N:
${availableActions}

DOM HTML TH·ª∞C T·∫æ (${this.enableTruncation ? 'c√≥ th·ªÉ b·ªã truncate' : 'FULL DOM'}):
${dom}

üî• QUY T·∫ÆC QUAN TR·ªåNG V·ªÄ CSS SELECTORS:
1. CH·ªà s·ª≠ d·ª•ng CSS selectors C√ì TH·∫¨T trong DOM HTML ·ªü tr√™n
2. TUY·ªÜT ƒê·ªêI KH√îNG t·ª± b·ªãa hay ƒëo√°n selector
3. KH√îNG bao gi·ªù s·ª≠ d·ª•ng __stagehand_id ho·∫∑c fake IDs
4. ∆Øu ti√™n s·ª≠ d·ª•ng theo th·ª© t·ª±:
   - ARIA labels: [aria-label*="comment"], [aria-label*="like"], [aria-label*="share"]
   - Role + text: [role="button"]:contains("Comment"), [role="button"]:contains("Like")
   - ID th·∫≠t: #loginButton, #commentButton
   - Name attribute: input[name="username"], button[name="submit"]
   - Data attributes: [data-testid="comment"], [data-cy="like-button"]
   - Type + context: input[type="email"], button[type="submit"]
   - Classes ·ªïn ƒë·ªãnh: .comment-button, .like-btn (KH√îNG d√πng .css-xyz123)
   - Text content: button:contains("Comment"), span:contains("Like")
   - Structure: .post-actions button:first-child

üåü ƒê·∫∂C BI·ªÜT CHO FACEBOOK/SOCIAL MEDIA:
- Comment button: [aria-label*="comment"], [role="button"]:contains("Comment"), div[role="button"] span:contains("Comment")
- Like button: [aria-label*="like"], [role="button"]:contains("Like"), div[role="button"] span:contains("Th√≠ch")
- Share button: [aria-label*="share"], [role="button"]:contains("Share"), div[role="button"] span:contains("Chia s·∫ª")
- Vietnamese text: "B√¨nh lu·∫≠n", "Th√≠ch", "Chia s·∫ª"

CHI·∫æN L∆Ø·ª¢C CH·ªåN SELECTOR:
- PH√ÇN T√çCH K·ª∏ DOM tr∆∞·ªõc khi t·∫°o selector
- T√¨m attributes C√ì TH·∫¨T: aria-label, role, data-*, id, name, class
- V·ªõi social media buttons: ∆∞u ti√™n aria-label v√† role="button"
- V·ªõi form inputs: d√πng name ho·∫∑c type attribute  
- CH·ªà d√πng t·ªça ƒë·ªô (click) khi TH·∫¨T S·ª∞ kh√¥ng c√≥ selector n√†o

V√ç D·ª§ PH√ÇN T√çCH ƒê√öNG:
- N·∫øu DOM c√≥: <div aria-label="Leave a comment" role="button"><span>Comment</span></div>
- D√πng: [aria-label*="comment" i] HO·∫∂C [role="button"]:contains("Comment")
- KH√îNG t·ª± b·ªãa: #comment-btn (n·∫øu kh√¥ng c√≥ ID n√†y)

V√ç D·ª§ OUTPUT MONG MU·ªêN:
[
  {"action": "clickElement", "selector": "[aria-label*='comment' i]"},
  {"action": "fill", "selector": "textarea[aria-label*='comment']", "text": "B√¨nh lu·∫≠n c·ªßa t√¥i"},
  {"action": "clickElement", "selector": "[aria-label*='submit' i][role='button']"}
]

QUY T·∫ÆC CU·ªêI C√ôNG:
- B·∫ÆT BU·ªòC selector ph·∫£i T·ªíN T·∫†I trong DOM ·ªü tr√™n
- KI·ªÇM TRA t·ª´ng selector v·ªõi DOM tr∆∞·ªõc khi ƒë∆∞a v√†o JSON
- N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, d√πng c√°ch t·ªïng qu√°t h∆°n: [role="button"]:contains("text")
- TUY·ªÜT ƒê·ªêI KH√îNG ƒëo√°n m√≤ selector
- CH·ªà d√πng nh·ªØng g√¨ B·∫†N TH·∫§Y trong DOM HTML

H√£y t·∫°o script automation v·ªõi selectors TH·∫¨T d·ª±a tr√™n DOM ƒë∆∞·ª£c cung c·∫•p:`;

        try {
            // Get selected model from settings
            const selectedModel = document.getElementById('aiModel')?.value || 'gemini-2.5-flash';

            console.log('üî• Sending ENHANCED social media prompt to AI...');

            const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${selectedModel}:generateContent?key=${this.apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }],
                    generationConfig: {
                        temperature: 0.05, // Low temperature for consistent selectors
                        maxOutputTokens: 4096,
                        topP: 0.8,
                        topK: 40
                    }
                })
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`API Error: ${response.status} ${response.statusText} - ${errorText}`);
            }
            
            const data = await response.json();
            console.log('Raw API Response from Google:', JSON.stringify(data, null, 2));

            // KI·ªÇM TRA L·ªñI TR·ª∞C TI·∫æP T·ª™ API
            if (data.error) {
                console.error('Google AI API Error:', data.error);
                throw new Error(`API Error: ${data.error.message}`);
            }

            // KI·ªÇM TRA PH·∫¢N H·ªíI B·ªä CH·∫∂N B·ªûI B·ªò L·ªåC AN TO√ÄN
            if (!data.candidates) {
                if (data.promptFeedback && data.promptFeedback.blockReason) {
                    console.error('Prompt was blocked by safety filters:', data.promptFeedback);
                    throw new Error(`Y√™u c·∫ßu b·ªã ch·∫∑n. L√Ω do: ${data.promptFeedback.blockReason}`);
                } else {
                    console.error('Invalid API response structure:', data);
                    throw new Error('Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá: Kh√¥ng t√¨m th·∫•y "candidates".');
                }
            }

            // N·∫øu m·ªçi th·ª© ·ªïn, ti·∫øp t·ª•c x·ª≠ l√Ω
            const generatedText = data.candidates[0].content.parts[0].text;
            
            return generatedText;

        } catch (error) {
            console.error('Google AI API error:', error);
            throw new Error(`Google AI API call failed: ${error.message}`);
        }
    }

    getAvailableActions() {
        return `
üî• C√ÅC H√ÄNH ƒê·ªòNG C√ì S·∫¥N (ch·ªâ d√πng selector CSS TH·∫¨T):

C√ÅC H√ÄNH ƒê·ªòNG C∆† B·∫¢N:
- click: Click v√†o t·ªça ƒë·ªô {"action": "click", "x": 100, "y": 200}
- clickElement: Click v√†o element {"action": "clickElement", "selector": "CSS_SELECTOR_TH·∫¨T"}
- fill: ƒêi·ªÅn input {"action": "fill", "selector": "CSS_SELECTOR_TH·∫¨T", "text": "gi√°_tr·ªã"}
- type: Nh·∫≠p text (thay th·∫ø cho fill) {"action": "type", "selector": "CSS_SELECTOR_TH·∫¨T", "text": "gi√°_tr·ªã"}
- press: Nh·∫•n ph√≠m {"action": "press", "key": "Enter|Tab|Escape|Space"}
- hover: Hover v√†o element {"action": "hover", "selector": "CSS_SELECTOR_TH·∫¨T"}

ƒêI·ªÄU H∆Ø·ªöNG:
- goto: ƒêi t·ªõi URL {"action": "goto", "url": "https://example.com"}
- reload: Reload trang {"action": "reload"}

SCROLL:
- scroll: Scroll ph·∫ßn trƒÉm {"action": "scroll", "scrollMode": "percentage", "percentageY": 50}
- scroll: Scroll tuy·ªát ƒë·ªëi {"action": "scroll", "scrollMode": "absolute", "x": 0, "y": 500}
- scroll: Scroll t∆∞∆°ng ƒë·ªëi {"action": "scroll", "scrollMode": "relative", "x": 0, "y": 200}
- scroll: Scroll delta {"action": "scroll", "scrollMode": "delta", "delta": 300}

T∆Ø∆†NG T√ÅC FORM:
- selectOption: Ch·ªçn option dropdown {"action": "selectOption", "selector": "select[name='country']", "value": "gi√°_tr·ªã_option"}
- check: Check/uncheck checkbox {"action": "check", "selector": "input[type='checkbox'][name='agree']", "checked": true}

UPLOAD FILE:
- setInputFiles: Upload files {"action": "setInputFiles", "selector": "input[type='file']", "filePaths": ["file1.txt"]}

CH·ªú ƒê·ª¢I:
- wait: Ch·ªù th·ªùi gian {"action": "wait", "duration": 2000}
- waitForElement: Ch·ªù element {"action": "waitForElement", "selector": "CSS_SELECTOR_TH·∫¨T", "timeout": 10000}

L·∫§Y D·ªÆ LI·ªÜU:
- getText: L·∫•y text {"action": "getText", "selector": "CSS_SELECTOR_TH·∫¨T"}
- getAttribute: L·∫•y attribute {"action": "getAttribute", "selector": "CSS_SELECTOR_TH·∫¨T", "attribute": "href"}
- innerText: L·∫•y inner text {"action": "innerText", "selector": "CSS_SELECTOR_TH·∫¨T"}
- textContent: L·∫•y text content {"action": "textContent", "selector": "CSS_SELECTOR_TH·∫¨T"}
- inputValue: L·∫•y input value {"action": "inputValue", "selector": "input[name='username']"}

üî• V√ç D·ª§ CSS SELECTORS TH·∫¨T CHO SOCIAL MEDIA:
- Comment button: [aria-label*="comment" i], [role="button"]:contains("Comment"), div[role="button"] span:contains("B√¨nh lu·∫≠n")
- Like button: [aria-label*="like" i], [role="button"]:contains("Like"), div[role="button"] span:contains("Th√≠ch")  
- Share button: [aria-label*="share" i], [role="button"]:contains("Share"), div[role="button"] span:contains("Chia s·∫ª")
- Form inputs: input[name="email"], textarea[aria-label*="comment"], input[type="password"]
- Submit buttons: button[type="submit"], [role="button"][aria-label*="submit"]

üö´ TUY·ªÜT ƒê·ªêI KH√îNG S·ª¨ D·ª§NG:
- __stagehand_id (kh√¥ng c√≥ th·∫≠t!)
- Selectors kh√¥ng c√≥ trong DOM
- Generated classes nh∆∞ .css-xyz123, .makeStyles-root
- Fake IDs kh√¥ng t·ªìn t·∫°i
`;
    }

    parseAIResponse(aiResponse) {
        try {
            // Clean up the response - remove markdown code blocks if any
            let cleanResponse = aiResponse.trim();
            cleanResponse = cleanResponse.replace(/```json\s*/g, '').replace(/```\s*/g, '');
            
            // Find JSON array in the response
            const jsonMatch = cleanResponse.match(/\[[\s\S]*\]/);
            if (!jsonMatch) {
                // Th·ª≠ t√¨m JSON object thay v√¨ array
                const objectMatch = cleanResponse.match(/\{[\s\S]*\}/);
                if (objectMatch) {
                    const singleStep = JSON.parse(objectMatch[0]);
                    return [singleStep]; // Wrap trong array
                }
                throw new Error('Kh√¥ng t√¨m th·∫•y JSON array trong ph·∫£n h·ªìi AI');
            }

            const steps = JSON.parse(jsonMatch[0]);
            
            if (!Array.isArray(steps)) {
                throw new Error('Ph·∫£n h·ªìi AI kh√¥ng ph·∫£i l√† array');
            }

            // üî• ENHANCED: Validate and convert steps with REAL selector validation
            return steps.map((step, index) => {
                if (!step.action) {
                    throw new Error(`B∆∞·ªõc ${index + 1} thi·∫øu action`);
                }

                // Convert AI format to our internal format
                const convertedStep = {
                    type: step.action,
                    tabId: null // Will be set when used
                };

                // Map common properties
                if (step.selector) {
                    // üî• VALIDATE SELECTOR - c·∫£nh b√°o n·∫øu c√≥ v·∫ª fake
                    if (step.selector.includes('__stagehand_id')) {
                        console.warn(`‚ö†Ô∏è B∆∞·ªõc ${index + 1}: AI v·∫´n d√πng fake __stagehand_id!`);
                        // C√≥ th·ªÉ replace b·∫±ng fallback selector
                    }
                    convertedStep.selector = step.selector;
                }
                
                if (step.text) convertedStep.text = step.text;
                if (step.value) convertedStep.value = step.value;
                if (step.url) convertedStep.url = step.url;
                if (step.key) convertedStep.key = step.key;
                if (step.timeout) convertedStep.timeout = step.timeout;
                if (step.duration) convertedStep.duration = step.duration;
                if (step.checked !== undefined) convertedStep.checked = step.checked;
                if (step.attribute) convertedStep.attribute = step.attribute;
                if (step.filePaths) convertedStep.filePaths = step.filePaths;

                // Handle coordinates properly
                if (step.x !== undefined) convertedStep.x = parseInt(step.x);
                if (step.y !== undefined) convertedStep.y = parseInt(step.y);

                // Handle scroll parameters
                if (step.action === 'scroll') {
                    if (step.scrollMode) convertedStep.scrollMode = step.scrollMode;
                    if (step.x !== undefined) convertedStep.x = step.x;
                    if (step.y !== undefined) convertedStep.y = step.y;
                    if (step.percentageX !== undefined) convertedStep.percentageX = step.percentageX;
                    if (step.percentageY !== undefined) convertedStep.percentageY = step.percentageY;
                    if (step.delta !== undefined) convertedStep.delta = step.delta;
                    if (step.smooth !== undefined) convertedStep.smooth = step.smooth;
                }

                // Validate coordinates for click action
                if (convertedStep.type === 'click') {
                    if (convertedStep.x === undefined || convertedStep.y === undefined || 
                        isNaN(convertedStep.x) || isNaN(convertedStep.y)) {
                        console.warn(`Warning: Click step ${index + 1} c√≥ t·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá:`, convertedStep);
                        // Convert to clickElement if possible
                        if (convertedStep.selector) {
                            convertedStep.type = 'clickElement';
                            delete convertedStep.x;
                            delete convertedStep.y;
                        } else {
                            throw new Error(`B∆∞·ªõc ${index + 1}: Click c·∫ßn t·ªça ƒë·ªô x, y h·ª£p l·ªá ho·∫∑c selector`);
                        }
                    }
                }

                // üî• ENHANCED SELECTOR VALIDATION
                if (convertedStep.selector) {
                    // C·∫£nh b√°o v·ªÅ c√°c pattern c√≥ v·∫•n ƒë·ªÅ
                    if (convertedStep.selector.includes('__stagehand_id')) {
                        console.warn(`üö´ FAKE SELECTOR: B∆∞·ªõc ${index + 1} d√πng __stagehand_id (kh√¥ng t·ªìn t·∫°i)`);
                    }
                    
                    if (convertedStep.selector.match(/\#[a-z0-9]{8,}/i)) {
                        console.warn(`‚ö†Ô∏è SUSPICIOUS ID: B∆∞·ªõc ${index + 1} selector ${convertedStep.selector} c√≥ v·∫ª l√† generated ID`);
                    }
                    
                    if (convertedStep.selector.includes('.css-') || convertedStep.selector.includes('.makeStyles-')) {
                        console.warn(`‚ö†Ô∏è GENERATED CLASS: B∆∞·ªõc ${index + 1} selector ${convertedStep.selector} d√πng generated class`);
                    }
                }

                return convertedStep;
            });

        } catch (error) {
            console.error('L·ªói ph√¢n t√≠ch ph·∫£n h·ªìi AI:', error);
            console.error('Raw AI response:', aiResponse);
            throw new Error(`Kh√¥ng th·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi AI: ${error.message}`);
        }
    }

    displayGeneratedScript(steps) {
        const container = document.getElementById('aiGeneratedScript');
        if (!container) return;

        if (steps.length === 0) {
            container.innerHTML = '<div class="empty-state">Kh√¥ng t·∫°o ƒë∆∞·ª£c script n√†o.</div>';
            return;
        }

        container.innerHTML = '';

        steps.forEach((step, index) => {
            const stepElement = document.createElement('div');
            stepElement.className = 'ai-script-step';
            stepElement.style.cssText = `
                border: 1px solid #e2e8f0;
                border-radius: 6px;
                margin-bottom: 8px;
                background: white;
                padding: 12px;
                transition: all 0.2s ease;
            `;

            // Hover effect
            stepElement.addEventListener('mouseenter', () => {
                stepElement.style.borderColor = '#10b981';
                stepElement.style.boxShadow = '0 2px 8px rgba(16, 185, 129, 0.1)';
            });
            stepElement.addEventListener('mouseleave', () => {
                stepElement.style.borderColor = '#e2e8f0';
                stepElement.style.boxShadow = 'none';
            });

            const stepHeader = document.createElement('div');
            stepHeader.style.cssText = `
                font-size: 12px;
                font-weight: 600;
                color: #1e293b;
                margin-bottom: 4px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            `;
            
            const stepTitle = document.createElement('span');
            stepTitle.textContent = `${index + 1}. ${this.getStepTypeLabel(step.type)}`;
            
            // üî• ENHANCED validation indicator with REAL selector checking
            const validationIcon = document.createElement('span');
            if (step.type === 'click' && (step.x !== undefined && step.y !== undefined)) {
                validationIcon.textContent = 'üéØ';
                validationIcon.title = 'Click t·ªça ƒë·ªô';
                validationIcon.style.color = '#f59e0b';
            } else if (step.selector) {
                // Check for real selector quality
                if (step.selector.includes('__stagehand_id')) {
                    validationIcon.textContent = 'üö´';
                    validationIcon.title = 'FAKE ID - Selector kh√¥ng t·ªìn t·∫°i!';
                    validationIcon.style.color = '#ef4444';
                } else if (step.selector.includes('#') || step.selector.includes('[name=') || step.selector.includes('[data-') || step.selector.includes('[aria-label')) {
                    validationIcon.textContent = '‚úÖ';
                    validationIcon.title = 'Selector semantic t·ªët';
                    validationIcon.style.color = '#10b981';
                } else if (step.selector.includes('.css-') || step.selector.includes('.makeStyles-')) {
                    validationIcon.textContent = '‚ö†Ô∏è';
                    validationIcon.title = 'Generated class - c√≥ th·ªÉ kh√¥ng ·ªïn ƒë·ªãnh';
                    validationIcon.style.color = '#f59e0b';
                } else {
                    validationIcon.textContent = 'üëå';
                    validationIcon.title = 'Selector OK';
                    validationIcon.style.color = '#6366f1';
                }
            } else {
                validationIcon.textContent = '‚úÖ';
                validationIcon.title = 'Kh√¥ng c·∫ßn selector';
                validationIcon.style.color = '#10b981';
            }
            
            stepHeader.appendChild(stepTitle);
            stepHeader.appendChild(validationIcon);

            const stepDetails = document.createElement('div');
            stepDetails.style.cssText = `
                font-size: 11px;
                color: #64748b;
                line-height: 1.4;
            `;
            stepDetails.textContent = this.getStepDescription(step);

            stepElement.appendChild(stepHeader);
            stepElement.appendChild(stepDetails);
            container.appendChild(stepElement);
        });

        // Store generated steps for later use
        this.generatedSteps = steps;
        
        // üî• ENHANCED summary with selector analysis
        const summary = document.createElement('div');
        summary.style.cssText = `
            margin-top: 12px;
            padding: 12px;
            background: #f0fdf4;
            border: 1px solid #dcfce7;
            border-radius: 6px;
            font-size: 11px;
            color: #166534;
        `;
        
        const fakeSelectors = steps.filter(s => s.selector && s.selector.includes('__stagehand_id')).length;
        const realSelectors = steps.filter(s => s.selector && !s.selector.includes('__stagehand_id')).length;
        const coordinateClicks = steps.filter(s => s.type === 'click' && s.x !== undefined).length;
        
        summary.innerHTML = `
            <strong>üìä Ph√¢n t√≠ch Script AI:</strong><br>
            ‚Ä¢ T·ªïng c·ªông: ${steps.length} b∆∞·ªõc<br>
            ‚Ä¢ Selector th·∫≠t: ${realSelectors} b∆∞·ªõc ‚úÖ<br>
            ‚Ä¢ Fake selector (__stagehand_id): ${fakeSelectors} b∆∞·ªõc üö´<br>
            ‚Ä¢ Click t·ªça ƒë·ªô: ${coordinateClicks} b∆∞·ªõc üéØ<br>
            ${fakeSelectors > 0 ? '<br><strong style="color: #dc2626;">‚ö†Ô∏è C√≥ fake selector! C·∫ßn s·ª≠a l·∫°i!</strong>' : '<br><strong style="color: #059669;">üéâ T·∫•t c·∫£ selector ƒë·ªÅu th·∫≠t!</strong>'}
        `;
        container.appendChild(summary);
    }

    // DOM Display Functions
    displayDOMContent(domContent) {
        this.lastDOMContent = domContent;
        const textarea = document.getElementById('aiDOMText');
        const lengthSpan = document.getElementById('domLength');
        
        if (textarea) {
            textarea.value = domContent;
        }
        
        if (lengthSpan) {
            lengthSpan.textContent = domContent.length.toLocaleString();
        }

        this.updateDOMTruncationInfo();

        // Auto show DOM container
        const container = document.getElementById('aiDOMResponse');
        const button = document.getElementById('toggleDOMResponse');
        if (container && container.style.display === 'none') {
            container.style.display = 'block';
            if (button) button.textContent = 'üëÅÔ∏è Hide';
        }
    }

    updateDOMTruncationInfo() {
        const truncatedSpan = document.getElementById('domTruncated');
        const domStatus = document.getElementById('domStatus');
        const domInfoBox = document.getElementById('domInfoBox');
        const domInfoContent = document.getElementById('domInfoContent');
        
        if (truncatedSpan) {
            if (!this.enableTruncation) {
                truncatedSpan.textContent = 'Disabled';
                truncatedSpan.style.color = '#10b981';
                truncatedSpan.title = 'Truncation is disabled - full DOM sent to AI';
            } else {
                const wasTruncated = this.truncatedDOMLength < this.originalDOMLength;
                truncatedSpan.textContent = wasTruncated ? 'Yes' : 'No';
                truncatedSpan.style.color = wasTruncated ? '#dc2626' : '#16a34a';
                truncatedSpan.title = wasTruncated ? 
                    `DOM was truncated from ${this.originalDOMLength} to ${this.truncatedDOMLength} chars` :
                    'Full DOM sent to AI without truncation';
            }
        }

        // Update status indicator
        if (domStatus) {
            if (!this.enableTruncation) {
                domStatus.textContent = '‚úÖ Full DOM';
                domStatus.className = 'status-full-dom';
            } else if (this.truncatedDOMLength < this.originalDOMLength) {
                domStatus.textContent = '‚ö†Ô∏è Truncated';
                domStatus.className = 'status-truncated';
            } else {
                domStatus.textContent = '‚úÖ Not Truncated';
                domStatus.className = 'status-full-dom';
            }
        }

        // Update info box
        if (domInfoBox && domInfoContent) {
            if (!this.enableTruncation) {
                domInfoBox.className = 'truncation-disabled';
                domInfoContent.innerHTML = `
                    ‚Ä¢ DOM ƒë∆∞·ª£c g·ª≠i ƒë·∫ßy ƒë·ªß cho AI (KHUY·∫æN NGH·ªä)<br>
                    ‚Ä¢ T·∫•t c·∫£ elements ƒë∆∞·ª£c b·∫£o to√†n<br>
                    ‚Ä¢ Comment/Like/Share buttons lu√¥n c√≥ trong DOM<br>
                    ‚Ä¢ AI s·∫Ω th·∫•y to√†n b·ªô structure c·ªßa trang
                `;
            } else {
                domInfoBox.className = 'truncation-enabled';
                domInfoContent.innerHTML = `
                    ‚Ä¢ DOM s·∫Ω b·ªã c·∫Øt n·∫øu v∆∞·ª£t qu√° ${this.maxDomSize} chars<br>
                    ‚Ä¢ Important elements ƒë∆∞·ª£c b·∫£o v·ªá<br>
                    ‚Ä¢ C√≥ th·ªÉ m·∫•t m·ªôt s·ªë interactive elements<br>
                    ‚Ä¢ Khuy·∫øn ngh·ªã: T·∫ÆT truncation ƒë·ªÉ AI ho·∫°t ƒë·ªông t·ªët h∆°n
                `;
            }
        }
    }

    toggleDOMResponseDisplay() {
        const container = document.getElementById('aiDOMResponse');
        const button = document.getElementById('toggleDOMResponse');
        
        if (container && button) {
            if (container.style.display === 'none') {
                container.style.display = 'block';
                button.textContent = 'üëÅÔ∏è Hide';
            } else {
                container.style.display = 'none';
                button.textContent = 'üëÅÔ∏è Show';
            }
        }
    }

    copyDOMResponseToClipboard() {
        const textarea = document.getElementById('aiDOMText');
        if (textarea && textarea.value) {
            const tempInput = document.createElement('textarea');
            tempInput.value = textarea.value;
            document.body.appendChild(tempInput);
            tempInput.select();
            document.execCommand('copy');
            document.body.removeChild(tempInput);
            
            this.showAlert('ƒê√£ copy DOM content v√†o clipboard!', 'success');
        } else {
            this.showAlert('Kh√¥ng c√≥ DOM content ƒë·ªÉ copy!', 'warning');
        }
    }

    clearDOMResponseDisplay() {
        const textarea = document.getElementById('aiDOMText');
        const lengthSpan = document.getElementById('domLength');
        const truncatedSpan = document.getElementById('domTruncated');
        
        if (textarea) {
            textarea.value = '';
        }
        if (lengthSpan) {
            lengthSpan.textContent = '0';
        }
        if (truncatedSpan) {
            truncatedSpan.textContent = 'No';
        }
        
        this.lastDOMContent = '';
        this.originalDOMLength = 0;
        this.truncatedDOMLength = 0;
        
        this.showAlert('ƒê√£ x√≥a DOM content!', 'info');
    }

    // AI Response Display Functions
    displayRawAIResponse(rawResponse) {
        this.lastRawResponse = rawResponse;
        const textarea = document.getElementById('aiResponseText');
        if (textarea) {
            // Format JSON ƒë·∫πp n·∫øu c√≥ th·ªÉ parse
            try {
                // Try to extract JSON from response
                const jsonMatch = rawResponse.match(/\[[\s\S]*\]/) || rawResponse.match(/\{[\s\S]*\}/);
                if (jsonMatch) {
                    const parsed = JSON.parse(jsonMatch[0]);
                    const formatted = JSON.stringify(parsed, null, 2);
                    textarea.value = `=== RAW AI RESPONSE ===\n${rawResponse}\n\n=== EXTRACTED JSON ===\n${formatted}`;
                } else {
                    textarea.value = `=== RAW AI RESPONSE ===\n${rawResponse}\n\n=== NOTE ===\nKh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong response`;
                }
            } catch (e) {
                // N·∫øu kh√¥ng ph·∫£i JSON th√¨ hi·ªÉn th·ªã raw
                textarea.value = `=== RAW AI RESPONSE ===\n${rawResponse}\n\n=== PARSE ERROR ===\n${e.message}`;
            }
        }

        // Auto show if first time
        const container = document.getElementById('aiRawResponse');
        const button = document.getElementById('toggleAIResponse');
        if (container && container.style.display === 'none') {
            container.style.display = 'block';
            if (button) button.textContent = 'üëÅÔ∏è Hide';
        }
    }

    toggleAIResponseDisplay() {
        const container = document.getElementById('aiRawResponse');
        const button = document.getElementById('toggleAIResponse');
        
        if (container && button) {
            if (container.style.display === 'none') {
                container.style.display = 'block';
                button.textContent = 'üëÅÔ∏è Hide';
            } else {
                container.style.display = 'none';
                button.textContent = 'üëÅÔ∏è Show';
            }
        }
    }

    copyAIResponseToClipboard() {
        const textarea = document.getElementById('aiResponseText');
        if (textarea && textarea.value) {
            // Create a temporary input to select and copy
            const tempInput = document.createElement('textarea');
            tempInput.value = textarea.value;
            document.body.appendChild(tempInput);
            tempInput.select();
            document.execCommand('copy');
            document.body.removeChild(tempInput);
            
            this.showAlert('ƒê√£ copy AI response v√†o clipboard!', 'success');
        } else {
            this.showAlert('Kh√¥ng c√≥ AI response ƒë·ªÉ copy!', 'warning');
        }
    }

    clearAIResponseDisplay() {
        const textarea = document.getElementById('aiResponseText');
        if (textarea) {
            textarea.value = '';
            this.lastRawResponse = '';
        }
        this.showAlert('ƒê√£ x√≥a AI response!', 'info');
    }

    getStepTypeLabel(type) {
        const labels = {
            click: 'Click (t·ªça ƒë·ªô)',
            clickElement: 'Click Element', 
            fill: 'ƒêi·ªÅn Text',
            type: 'Nh·∫≠p Text',
            press: 'Nh·∫•n Ph√≠m',
            hover: 'Hover',
            goto: 'ƒêi t·ªõi URL',
            reload: 'Reload',
            scroll: 'Scroll',
            selectOption: 'Ch·ªçn Option',
            check: 'Check/Uncheck',
            setInputFiles: 'Upload Files',
            wait: 'Ch·ªù',
            waitForElement: 'Ch·ªù Element',
            getText: 'L·∫•y Text',
            getAttribute: 'L·∫•y Attribute',
            innerText: 'L·∫•y Inner Text',
            textContent: 'L·∫•y Text Content',
            inputValue: 'L·∫•y Input Value'
        };
        return labels[type] || type;
    }

    getStepDescription(step) {
        switch (step.type) {
            case 'click':
                return `T·ªça ƒë·ªô: (${step.x}, ${step.y})`;
            case 'clickElement':
                return `Click: ${step.selector}`;
            case 'fill':
            case 'type':
                return `${step.selector} ‚Üê "${step.text}"`;
            case 'press':
                return `Nh·∫•n ph√≠m: ${step.key}`;
            case 'hover':
                return `Hover: ${step.selector}`;
            case 'goto':
                return `URL: ${step.url}`;
            case 'scroll':
                if (step.scrollMode === 'percentage') {
                    return `Scroll ${step.percentageY || 0}%`;
                } else if (step.scrollMode === 'delta') {
                    return `Scroll ${step.delta}px`;
                } else {
                    return `Scroll t·ªõi (${step.x || 0}, ${step.y || 0})`;
                }
            case 'selectOption':
                return `${step.selector} ‚Üí ${step.value}`;
            case 'check':
                return `${step.selector} ‚Üí ${step.checked ? 'Check' : 'Uncheck'}`;
            case 'wait':
                return `Ch·ªù ${step.duration}ms`;
            case 'waitForElement':
                return `Ch·ªù: ${step.selector}`;
            case 'setInputFiles':
                return `Upload: ${step.filePaths ? step.filePaths.length : 0} file(s)`;
            default:
                return JSON.stringify(step, null, 2);
        }
    }

    clearAIScript() {
        const container = document.getElementById('aiGeneratedScript');
        if (container) {
            container.innerHTML = '<div class="empty-state">Ch∆∞a c√≥ script n√†o ƒë∆∞·ª£c t·∫°o.</div>';
        }
        
        const description = document.getElementById('aiDescription');
        if (description) {
            description.value = '';
        }

        this.generatedSteps = [];
    }

    useGeneratedScript() {
        if (!this.generatedSteps || this.generatedSteps.length === 0) {
            this.showAlert('Ch∆∞a c√≥ script n√†o ƒë·ªÉ s·ª≠ d·ª•ng.', 'warning');
            return;
        }

        // Send generated steps to script builder
        if (window.enhancedScriptBuilder) {
            // Switch to scripts tab
            const scriptsTab = document.querySelector('[data-page="scripts"]');
            if (scriptsTab) {
                scriptsTab.click();
            }

            // Set the steps in script builder
            window.enhancedScriptBuilder.setStepsFromAI(this.generatedSteps);
            this.showAlert('ƒê√£ chuy·ªÉn script sang Script Builder!', 'success');
        } else {
            this.showAlert('Script Builder ch∆∞a s·∫µn s√†ng.', 'error');
        }
    }

    // üî• NEW: Methods to control truncation from UI
    enableDOMTruncation(enable = true) {
        this.enableTruncation = enable;
        console.log(`üîß DOM Truncation: ${enable ? 'ENABLED' : 'DISABLED'}`);
        this.updateDOMTruncationInfo();
        
        // Save setting
        chrome.storage.local.set({ enableTruncation: enable });
    }

    setMaxDOMSize(size) {
        this.maxDomSize = size;
        console.log(`üîß Max DOM Size set to: ${size} chars`);
        
        // Save setting
        chrome.storage.local.set({ maxDomSize: size });
    }

    // Load settings from storage
    async loadSettings() {
        try {
            const result = await chrome.storage.local.get([
                'enableTruncation', 
                'maxDomSize'
            ]);
            
            if (result.enableTruncation !== undefined) {
                this.enableTruncation = result.enableTruncation;
            }
            
            if (result.maxDomSize) {
                this.maxDomSize = result.maxDomSize;
            }
            
            // Update UI controls
            const enableTruncationInput = document.getElementById('enableTruncation');
            const maxDomSizeInput = document.getElementById('maxDomSize');
            
            if (enableTruncationInput) enableTruncationInput.checked = this.enableTruncation;
            if (maxDomSizeInput) maxDomSizeInput.value = this.maxDomSize;
            
            console.log(`üîß Settings loaded: Truncation=${this.enableTruncation}, MaxSize=${this.maxDomSize}`);
            
        } catch (error) {
            console.error('Failed to load settings:', error);
        }
    }

    showAlert(message, type = 'info') {
        if (window.SidebarUtils && window.SidebarUtils.showNotification) {
            window.SidebarUtils.showNotification(message, type);
        } else {
            console.log(`[${type.toUpperCase()}] ${message}`);
        }
    }
}

// Initialize AI Helper when page loads
let aiHelper;
document.addEventListener('DOMContentLoaded', () => {
    aiHelper = new AIHelper();
    
    // Load settings after initialization
    aiHelper.loadSettings();
    
    // Make AI helper globally available
    window.AIHelper = aiHelper;
    
    console.log('üî• FIXED: AI Helper loaded with CONFIGURABLE DOM TRUNCATION!');
});